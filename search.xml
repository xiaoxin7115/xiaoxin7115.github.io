<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随笔</title>
    <url>/2022/04/06/%E5%A4%96%E6%98%9F%E6%9C%8B%E5%8F%8B%E8%87%86%E6%83%B3%E5%89%8DNshi=%E5%AF%BB%E6%89%BE%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<span id="more"></span>



<blockquote>
<h2 id="外星朋友臆想前Nshi-寻找活着的意义-活着的意义是单纯的或者还是去寻找活着的意义呢"><a href="#外星朋友臆想前Nshi-寻找活着的意义-活着的意义是单纯的或者还是去寻找活着的意义呢" class="headerlink" title="外星朋友臆想前Nshi=寻找活着的意义(活着的意义是单纯的或者还是去寻找活着的意义呢)"></a>外星朋友臆想前Nshi=寻找活着的意义(活着的意义是单纯的或者还是去寻找活着的意义呢)</h2></blockquote>
<h4 id="第一shi"><a href="#第一shi" class="headerlink" title="第一shi"></a>第一shi</h4><p>刚出生直到记事的时候应该是同大多数其他人一样，哭、吃、喝、拉、撒····</p>
<h4 id="第二shi"><a href="#第二shi" class="headerlink" title="第二shi"></a>第二shi</h4><p>在最远的时光里，是大概剃辫子？或者更早一些，那时的日子必定是一生中最无忧无虑无求的时候，懵懂天真，世界虽小，却异常美好，（当然也有可能是记忆的自动美化）。</p>
<p>那天来了好多人，摆了很多桌客，家里的大院子也坐不下，一直延伸到门外数米，看照片发现，当时的水非常轻，那是的亲戚大多也都年轻，其他的我当时应该是什么都不知道的。只记得有个姐姐要和我拍照，我戴着生日帽，脸上不只是谁摸得蛋糕，只觉得拍照时老容易流泪，应该是睁眼太久了吧。哦对，还有，放生那条鱼是和wj哥一起。其他便没什么了。只知道那时什么也不知道，这样是最好。</p>
<h4 id="第三shi"><a href="#第三shi" class="headerlink" title="第三shi"></a>第三shi</h4><p>这大抵是人生噩梦的开始，毕竟性格是从小的环境养成的。那个朋友可能很久都没意识到，只觉得解决问题的方法是忍耐，亦或是离开。</p>
<hr>
<p>朋友飞离，说下次继续</p>
<hr>
<p>有这样一段记忆，他小时候老被同桌往脸上吐唾沫，不知如何是好，找来奶奶告诉老师，然后换了座位。据他说，长大后脸上还有些麻子，每每想起，甚是懊恼。</p>
<p>小学还被人欺负，因为听说有个人和班上的女同学做了很羞耻的事（互相脱光摸对方），被那人吹到厕所小欺负了一顿；那时还不以为然，后来便经常遭他欺负。如果能强烈反抗一次，也许人生会有很大的不一样。他说那是他不太乐意回忆的过去，小学 初中 高中。霸凌总是围绕着他，虽不大，却也影响深远。</p>
<p>这个外形朋友说以后每天与我分享一个故事，我去觉得是每天再揭开一次他的伤疤，也许有些好处吧，褪去阴暗，以后能更加阳光些吧。</p>
<h4 id="第四shi"><a href="#第四shi" class="headerlink" title="第四shi"></a>第四shi</h4><p>我好像是一种甚至没有三天热度的人，他的故事也许他乐意说，我也乐意听，却好像没有耐心一点点记录下来。</p>
<p>活着，究竟又有什么意义呢。</p>
<p>有些人说有病不要拖着，会越拖越大，这确实是实话，但仍然有很多人不到不得已不去看，我能理解，又或者说我就是那样的人。为什么说“我”呢，也许我和这个外星朋友已经难舍难分了，他是过去的我，我是现在的我。</p>
<hr>
<p>看着窗外的阳光明媚，回想着你的话语，心底顿起一股暖意，我不去分辨这是由她还是由你而来。从这，我好像找寻到一丝活着的意义。</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>我的博客beginning</title>
    <url>/2022/04/02/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2beginning/</url>
    <content><![CDATA[<p>爱猪妮是终身浪漫的开始</p>
<blockquote>
<p>亲爱的，你知道嘛。其实我一直在寻觅有什么方法可以不去喜欢你，现在终于明白…我对你的爱恋早溶入血液，渗到骨髓并且永久的驻留在身体的每个细胞里。我就这样不停的喜欢你喜欢你喜欢你喜欢你……直到停止心跳与呼吸……</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>java数据结构</title>
    <url>/2022/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java/</url>
    <content><![CDATA[<p>数据结构</p>
<span id="more"></span>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"><span class="comment">//1.定义一个学生类Student，具有年龄age和姓名username两个属性，并通过Comparable接口提供比较规则；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge()-o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义测试类Test，在测试类Test中定义测试方法Comparable getMax(Comparable c1,Comparable c2)完成测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建两个Student对象，并调用getMax方法，完成测试</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s2.setUsername(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        s2.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">max</span> <span class="operator">=</span> getMax(s1, s2);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title function_">getMax</span><span class="params">(Comparable c1,Comparable c2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c1.compareTo(c2);</span><br><span class="line">        <span class="comment">//如果result&lt;0,则c1比c2小；</span></span><br><span class="line">        <span class="comment">//如果result&gt;0，则c1比c2大；</span></span><br><span class="line">        <span class="comment">//如果result==0,则c1和c2一样大；</span></span><br><span class="line">        <span class="keyword">if</span> (result&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> c1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bubble</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=a.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="comment">//&#123;6,5,4,3,2,1&#125;</span></span><br><span class="line">                <span class="comment">//比较索引j和索引j+1处的值</span></span><br><span class="line">                <span class="keyword">if</span> (greater(a[j],a[j+<span class="number">1</span>]))&#123;</span><br><span class="line">                    exch(a,j,j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v,Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Bubble;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        Bubble.sort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//&#123;1,2,3,4,5,6&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Selection</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=a.length-<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//定义一个变量，记录最小元素所在的索引，默认为参与选择排序的第一个元素所在的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">                <span class="comment">//需要比较最小索引minIndex处的值和j索引处的值；</span></span><br><span class="line">                <span class="keyword">if</span> (greater(a[minIndex],a[j]))&#123;</span><br><span class="line">                    minIndex=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//交换最小元素所在索引minIndex处的值和索引i处的值</span></span><br><span class="line">            exch(a,i,minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v,Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Selection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//原始数据</span></span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        Selection.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//&#123;1,2,4,5,7,8,9,10&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insertion</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="comment">//比较索引j处的值和索引j-1处的值，如果索引j-1处的值比索引j处的值大，则交换数据，如果不大，那么就找到合适的位置了，退出循环即可；</span></span><br><span class="line">                <span class="keyword">if</span> (greater(a[j-<span class="number">1</span>],a[j]))&#123;</span><br><span class="line">                    exch(a,j-<span class="number">1</span>,j);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v,Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Insertion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Insertion.sort(a);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//&#123;1,2,3,4,5,6,10,12&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">        <span class="comment">//1.根据数组a的长度，确定增长量h的初始值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(h&lt;a.length/<span class="number">2</span>)&#123;</span><br><span class="line">            h=<span class="number">2</span>*h+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.希尔排序</span></span><br><span class="line">        <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//排序</span></span><br><span class="line">            <span class="comment">//2.1.找到待插入的元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=h;i&lt;a.length;i++)&#123;</span><br><span class="line">                <span class="comment">//2.2把待插入的元素插入到有序数列中</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j=i;j&gt;=h;j-=h)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//待插入的元素是a[j],比较a[j]和a[j-h]</span></span><br><span class="line">                    <span class="keyword">if</span> (greater(a[j-h],a[j]))&#123;</span><br><span class="line">                        <span class="comment">//交换元素</span></span><br><span class="line">                        exch(a,j-h,j);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//待插入元素已经找到了合适的位置，结束循环；</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//减小h的值</span></span><br><span class="line">            h= h/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v,Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Shell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Shell.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//&#123;1,2,3,4,5,5,6,7,8,9&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔与插入的比较"><a href="#希尔与插入的比较" class="headerlink" title="希尔与插入的比较"></a>希尔与插入的比较</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Insertion;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Merge;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Shell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortCompare</span> &#123;</span><br><span class="line">    <span class="comment">//调用不同的测试方法，完成测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ArrayList集合，保存读取出来的整数</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建缓存读取流BufferedReader，读取数据，并存储到ArrayList中；</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(SortCompare.class.getClassLoader().getResourceAsStream(<span class="string">&quot;reverse_arr.txt&quot;</span>)));</span><br><span class="line">        String line=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((line=reader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//line是字符串，把line转换成Integer，存储到集合中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(line);</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把ArrayList集合转换成数组</span></span><br><span class="line">        Integer[] a = <span class="keyword">new</span> <span class="title class_">Integer</span>[list.size()];</span><br><span class="line">        list.toArray(a);</span><br><span class="line">        <span class="comment">//4.调用测试代码完成测试</span></span><br><span class="line">        <span class="comment">//testInsertion(a);//37499毫秒</span></span><br><span class="line">        testShell(a);<span class="comment">//30毫秒</span></span><br><span class="line"><span class="comment">//        testMerge(a);//70毫秒</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试希尔排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testShell</span><span class="params">(Integer[] a)</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取执行之前的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//2.执行算法代码</span></span><br><span class="line">        Shell.sort(a);</span><br><span class="line">        <span class="comment">//3.获取执行之后的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//4.算出程序执行的时间并输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;希尔排序执行的时间为：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试插入排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testInsertion</span><span class="params">(Integer[] a)</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取执行之前的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//2.执行算法代码</span></span><br><span class="line">        Insertion.sort(a);</span><br><span class="line">        <span class="comment">//3.获取执行之后的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//4.算出程序执行的时间并输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;插入排序执行的时间为：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMerge</span><span class="params">(Integer[] a)</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取执行之前的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//2.执行算法代码</span></span><br><span class="line">        Merge.sort(a);</span><br><span class="line">        <span class="comment">//3.获取执行之后的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//4.算出程序执行的时间并输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;归并排序执行的时间为：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line">    <span class="comment">//归并所需要的辅助数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] assist;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       比较v元素是否小于w元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(Comparable v, Comparable w)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w)&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">           对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="comment">//1.初始化辅助数组assist；</span></span><br><span class="line">        assist = <span class="keyword">new</span> <span class="title class_">Comparable</span>[a.length];</span><br><span class="line">        <span class="comment">//2.定义一个lo变量，和hi变量，分别记录数组中最小的索引和最大的索引；</span></span><br><span class="line">        <span class="type">int</span> lo=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hi=a.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//3.调用sort重载方法完成数组a中，从索引lo到索引hi的元素的排序</span></span><br><span class="line">        sort(a,lo,hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对数组a中从lo到hi的元素进行排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="comment">//做安全性校验；</span></span><br><span class="line">        <span class="keyword">if</span> (hi&lt;=lo)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对lo到hi之间的数据进行分为两个组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo+(hi-lo)/<span class="number">2</span>;<span class="comment">//   5,9  mid=7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别对每一组数据进行排序</span></span><br><span class="line">        sort(a,lo,mid);</span><br><span class="line">        sort(a,mid+<span class="number">1</span>,hi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再把两个组中的数据进行归并</span></span><br><span class="line">        merge(a,lo,mid,hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对数组中，从lo到mid为一组，从mid+1到hi为一组，对这两组数据进行归并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="comment">//定义三个指针</span></span><br><span class="line">        <span class="type">int</span> i=lo;</span><br><span class="line">        <span class="type">int</span> p1=lo;</span><br><span class="line">        <span class="type">int</span> p2=mid+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历，移动p1指针和p2指针，比较对应索引处的值，找出小的那个，放到辅助数组的对应索引处</span></span><br><span class="line">        <span class="keyword">while</span>(p1&lt;=mid &amp;&amp; p2&lt;=hi)&#123;</span><br><span class="line">            <span class="comment">//比较对应索引处的值</span></span><br><span class="line">            <span class="keyword">if</span> (less(a[p1],a[p2]))&#123;</span><br><span class="line">                assist[i++] = a[p1++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                assist[i++]=a[p2++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历，如果p1的指针没有走完，那么顺序移动p1指针，把对应的元素放到辅助数组的对应索引处</span></span><br><span class="line">        <span class="keyword">while</span>(p1&lt;=mid)&#123;</span><br><span class="line">            assist[i++]=a[p1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历，如果p2的指针没有走完，那么顺序移动p2指针，把对应的元素放到辅助数组的对应索引处</span></span><br><span class="line">        <span class="keyword">while</span>(p2&lt;=hi)&#123;</span><br><span class="line">            assist[i++]=a[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把辅助数组中的元素拷贝到原数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> index=lo;index&lt;=hi;index++)&#123;</span><br><span class="line">            a[index]=assist[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        Merge.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//&#123;1,2,3,4,5,6,7,8&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      比较v元素是否小于w元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(Comparable v, Comparable w)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组内的元素进行排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> a.length-<span class="number">1</span>;</span><br><span class="line">        sort(a,lo,hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组a中从索引lo到索引hi之间的元素进行排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="comment">//安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (hi&lt;=lo)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要对数组中lo索引到hi索引处的元素进行分组（左子组和右子组）；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> partition(a, lo, hi);<span class="comment">//返回的是分组的分界值所在的索引，分界值位置变换后的索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让左子组有序</span></span><br><span class="line">        sort(a,lo,partition-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让右子组有序</span></span><br><span class="line">        sort(a,partition+<span class="number">1</span>,hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组a中，从索引 lo到索引 hi之间的元素进行分组，并返回分组界限对应的索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">       <span class="comment">//确定分界值</span></span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">key</span> <span class="operator">=</span> a[lo];</span><br><span class="line">        <span class="comment">//定义两个指针，分别指向待切分元素的最小索引处和最大索引处的下一个位置</span></span><br><span class="line">        <span class="type">int</span> left=lo;</span><br><span class="line">        <span class="type">int</span> right=hi+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//切分</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//先从右往左扫描，移动right指针，找到一个比分界值小的元素，停止</span></span><br><span class="line">            <span class="keyword">while</span>(less(key,a[--right]))&#123;</span><br><span class="line">                <span class="keyword">if</span> (right==lo)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//再从左往右扫描，移动left指针，找到一个比分界值大的元素，停止</span></span><br><span class="line">            <span class="keyword">while</span>(less(a[++left],key))&#123;</span><br><span class="line">                <span class="keyword">if</span> (left==hi)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断 left&gt;=right,如果是，则证明元素扫描完毕，结束循环，如果不是，则交换元素即可</span></span><br><span class="line">            <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                exch(a,left,right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//交换分界值</span></span><br><span class="line">        exch(a,lo,right);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.algorithm.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.algorithm.sort.Quick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a= &#123;<span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        Quick.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><ul>
<li>头、尾节点，前、后驱元素</li>
</ul>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321151317902.png" alt="image-20220321151317902"></p>
</blockquote>
<ul>
<li><p>实现顺序表的遍历</p>
<blockquote>
<p>1.让SequenceList实现Iterable接口，重写iterator方法；</p>
<p>2.在SequenceList内部提供一个内部类SIterator,实现Iterator接口，重写hasNext方法和next方法；</p>
</blockquote>
</li>
<li><p>顺序表增、删元素    时间复杂度    类比ArrayList的底层实现</p>
</li>
</ul>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul>
<li><p>链表的结点API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321151935687.png" alt="image-20220321151935687"></p>
</blockquote>
</li>
<li><p>单向链表</p>
<blockquote>
<p>API设计</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321152024769.png" alt="image-20220321152024769"></p>
</blockquote>
</li>
<li><p>双向链表</p>
<blockquote>
<p>节点</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321152137588.png" alt="image-20220321152137588"></p>
</blockquote>
<blockquote>
<p>API设计</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321152214819.png" alt="image-20220321152214819"></p>
</blockquote>
</li>
<li><p>复杂度分析    类比LinkedList实现</p>
</li>
<li><p>单链表的反转</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321152327934.png" alt="image-20220321152327934"></p>
</blockquote>
</li>
<li><p>快慢指针  -&gt;找出链表中间值问题解决方案   判断单向链表是否有环问题 以及 有环列表入口节点问题</p>
</li>
<li><p>循环列表的实现        约瑟夫问题</p>
<blockquote>
<p>41个人坐一圈，第一个人编号为1，第二个人编号为2，第n个人编号为n。 1.编号为1的人开始从1报数，依次向后，报数为3的那个人退出圈； 2.自退出那个人开始的下一个人再次从1开始报数，以此类推； 3.求出最后退出的那个人的编号。</p>
</blockquote>
</li>
</ul>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote>
<p>API设计</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321153039138.png" alt="image-20220321153039138"></p>
</blockquote>
<ul>
<li><p>案例：给定一个字符串，里边可能包含”()”小括号和其他字符，请编写程序检查该字符串的中的小括号是否成对出现</p>
<blockquote>
<p>1.创建一个栈用来存储左括号 </p>
<p>2.从左往右遍历字符串，拿到每一个字符 </p>
<p>3.判断该字符是不是左括号，如果是，放入栈中存储 </p>
<p>4.判断该字符是不是右括号，如果不是，继续下一次循环</p>
<p> 5.如果该字符是右括号，则从栈中弹出一个元素t；</p>
<p> 6.判断元素t是否为null，如果不是，则证明有对应的左括号，如果不是，则证明没有对应的左括号</p>
<p> 7.循环结束后，判断栈中还有没有剩余的左括号，如果有，则不匹配，如果没有，则匹配</p>
</blockquote>
</li>
<li><p>什么是中缀表达式和后缀表达式    逆波兰表达式求值问题（给定一个只包含加减乘除四种运算的逆波兰表达式的数组表示方式，求出该逆波兰表达式的结果）</p>
<blockquote>
<p>1.创建一个栈对象oprands存储操作数 </p>
<p>2.从左往右遍历逆波兰表达式，得到每一个字符串</p>
<p> 3.判断该字符串是不是运算符，如果不是，把该该操作数压入oprands栈中 </p>
<p>4.如果是运算符，则从oprands栈中弹出两个操作数o1,o2 </p>
<p>5.使用该运算符计算o1和o2，得到结果result </p>
<p>6.把该结果压入oprands栈中 </p>
<p>7.遍历结束后，拿出栈中最终的结果返回</p>
</blockquote>
</li>
</ul>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote>
<p>API设计</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321153914819.png" alt="image-20220321153914819"></p>
</blockquote>
<h1 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h1><blockquote>
<p>API设计</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321154115348.png" alt="image-20220321154115348"></p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321154132433.png" alt="image-20220321154132433"></p>
</blockquote>
<h3 id="有序符号表的实现"><a href="#有序符号表的实现" class="headerlink" title="有序符号表的实现"></a>有序符号表的实现</h3><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><ul>
<li><p>树的特点   </p>
<blockquote>
<p> 1.每个结点有零个或多个子结点； 2.没有父结点的结点为根结点； 3.每一个非根结点只有一个父结点； 4.每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树；</p>
</blockquote>
</li>
<li><p>相关术语-&gt;结点的度-&gt;叶结点-&gt;分支结点-&gt;结点的层次-&gt;结点的层序编号-&gt;树的度-&gt;树的高度(深度）-&gt;森林-&gt;孩子结点-&gt;双亲结点(父结点)-&gt;兄弟结点</p>
</li>
</ul>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul>
<li><p>满二叉树、完全二叉树</p>
</li>
<li><p>节点类API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321154733455.png" alt="image-20220321154733455"></p>
</blockquote>
</li>
<li><p>二叉查找树API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321154809871.png" alt="image-20220321154809871"></p>
</blockquote>
<blockquote>
<p>插入方法put实现思想： </p>
<p>1.如果当前树中没有任何一个结点，则直接把新结点当做根结点使用 </p>
<p>2.如果当前树不为空，则从根结点开始： </p>
<p>2.1如果新结点的key小于当前结点的key，则继续找当前结点的左子结点； </p>
<p>2.2如果新结点的key大于当前结点的key，则继续找当前结点的右子结点； </p>
<p>2.3如果新结点的key等于当前结点的key，则树中已经存在这样的结点，替换该结点的value值即可。</p>
</blockquote>
<blockquote>
<p>查询方法get实现思想： 从根节点开始： 1.如果要查询的key小于当前结点的key，则继续找当前结点的左子结点； 2.如果要查询的key大于当前结点的key，则继续找当前结点的右子结点； 3.如果要查询的key等于当前结点的key，则树中返回当前结点的value。</p>
</blockquote>
<blockquote>
<p>删除方法delete实现思想： 1.找到被删除结点； 2.找到被删除结点右子树中的最小结点minNode 3.删除右子树中的最小结点 4.让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点minNode的右子 树 5.让被删除结点的父节点指向最小结点minNode</p>
</blockquote>
</li>
<li><p>查找二叉树中最小的键</p>
<blockquote>
<table>
<thead>
<tr>
<th>public Key min()</th>
<th>找出树中最小的键</th>
</tr>
</thead>
<tbody><tr>
<td>private Node min(Node x)</td>
<td>找出指定树x中，最小键所在的结点</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>查找二叉树中最大的键</p>
<blockquote>
<table>
<thead>
<tr>
<th>public Key max()</th>
<th>找出树中最大的键</th>
</tr>
</thead>
<tbody><tr>
<td>private Node max(Node x)</td>
<td>找出指定树x中，最大键所在的结点</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>前序遍历</p>
<blockquote>
<p>API：</p>
<p>public Queue preErgodic()：使用前序遍历，获取整个树中的所有键 </p>
<p>private void preErgodic(Node x,Queue keys)：使用前序遍历，把指定树x中的所有键放入到keys队列中</p>
</blockquote>
<blockquote>
<p>1.把当前结点的key放入到队列中; 2.找到当前结点的左子树，如果不为空，递归遍历左子树 3.找到当前结点的右子树，如果不为空，递归遍历右子树</p>
</blockquote>
</li>
<li><p>中序遍历 </p>
<blockquote>
<p>API：</p>
<p> public Queue midErgodic()：使用中序遍历，获取整个树中的所有键</p>
<p> private void midErgodic(Node x,Queue keys)：使用中序遍历，把指定树x中的所有键放入到keys队列中</p>
</blockquote>
<blockquote>
<p>1.找到当前结点的左子树，如果不为空，递归遍历左子树 2.把当前结点的key放入到队列中; 3.找到当前结点的右子树，如果不为空，递归遍历右子树</p>
</blockquote>
</li>
<li><p>后序遍历</p>
<blockquote>
<p>API： </p>
<p>public Queue afterErgodic()：使用后序遍历，获取整个树中的所有键 </p>
<p>private void afterErgodic(Node x,Queue keys)：使用后序遍历，把指定树x中的所有键放入到keys队列中</p>
</blockquote>
<blockquote>
<p>1.找到当前结点的左子树，如果不为空，递归遍历左子树 2.找到当前结点的右子树，如果不为空，递归遍历右子树 3.把当前结点的key放入到队列中</p>
</blockquote>
</li>
<li><p>层序遍历</p>
<blockquote>
<p>API:</p>
<p>public Queue layerErgodic()：使用层序遍历，获取整个树中的所有键</p>
</blockquote>
<blockquote>
<p>1.创建队列，存储每一层的结点； 2.使用循环从队列中弹出一个结点： 2.1获取当前结点的key； 2.2如果当前结点的左子结点不为空，则把左子结点放入到队列中 2.3如果当前结点的右子结点不为空，则把右子结点放入到队列中</p>
</blockquote>
</li>
<li><p>最大深度</p>
<blockquote>
<p>API</p>
<p>public int maxDepth()：计算整个树的最大深度 private int maxDepth(Node x):计算指定树x的最大深度</p>
</blockquote>
<blockquote>
<p>1.如果根结点为空，则最大深度为0； 2.计算左子树的最大深度； 3.计算右子树的最大深度； 4.当前树的最大深度=左子树的最大深度和右子树的最大深度中的较大者+1</p>
</blockquote>
</li>
<li><p>案例：折纸问题</p>
</li>
</ul>
<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><ul>
<li><p>堆的实现</p>
<ul>
<li>insert插入方法</li>
<li>delMax方法</li>
</ul>
</li>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321161805411.png" alt="image-20220321161805411"></p>
</blockquote>
</li>
</ul>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul>
<li><p>String[] arr = {“S”,”O”,”R”,”T”,”E”,”X”,”A”,”M”,”P”,”L”,”E”} 请对数组中的字符按从小到大排序</p>
<blockquote>
<p>1.构造堆； 2.得到堆顶元素，这个值就是最大值； 3.交换堆顶元素和数组中的最后一个元素，此时所有元素中的最大元素已经放到合适的位置； 4.对堆进行调整，重新让除了最后一个元素的剩余元素中的最大值放到堆顶； 5.重复2~4这个步骤，直到堆中剩一个元素为止。</p>
</blockquote>
</li>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321162111732.png" alt="image-20220321162111732"></p>
</blockquote>
</li>
<li><p>堆构造及堆排序问题</p>
<blockquote>
<p> 另外再创建一个和新数组数组，然后从左往右遍历原数组，每得到一个元素后，添加 到新数组中，并通过上浮，对堆进行调整，最后新的数组就是一个堆。////创建一个新数组，把原数组 0<del>length-1的数据拷贝到新数组的1</del>length处，再从新数组长度的一半处开始往1索引处扫描（从右往左），然后 对扫描到的每一个元素做下沉调整即可</p>
</blockquote>
<blockquote>
<p>1.将堆顶元素和堆中最后一个元素交换位置； 2.通过对堆顶元素下沉调整堆，把最大的元素放到堆顶(此时最后一个元素不参与堆的调整，因为最大的数据已经到 了数组的最右边) 3.重复1~2步骤，直到堆中剩最后一个元素。</p>
</blockquote>
</li>
</ul>
<h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><h3 id="最大优先队列"><a href="#最大优先队列" class="headerlink" title="最大优先队列"></a>最大优先队列</h3><ul>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321164014911.png" alt="image-20220321164014911"></p>
</blockquote>
</li>
</ul>
<h3 id="最小优先队列"><a href="#最小优先队列" class="headerlink" title="最小优先队列"></a>最小优先队列</h3><ul>
<li><p>最大堆和最小堆</p>
</li>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321164156922.png" alt="image-20220321164156922"></p>
</blockquote>
</li>
</ul>
<h3 id="索引优先队列"><a href="#索引优先队列" class="headerlink" title="索引优先队列"></a>索引优先队列</h3><ul>
<li><p><strong>实现思路</strong></p>
</li>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321164316565.png" alt="image-20220321164316565"></p>
</blockquote>
</li>
</ul>
<h1 id="树进阶"><a href="#树进阶" class="headerlink" title="树进阶"></a>树进阶</h1><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><ul>
<li><p>查找树定义、查找、<strong>插入</strong></p>
</li>
<li><p>红黑树的定义</p>
</li>
<li><p>结点API</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321170045246.png" alt="image-20220321170045246"></p>
</blockquote>
</li>
<li><p>平衡化之左旋、右旋</p>
<blockquote>
<p>左旋过程： 1.让x的左子结点变为h的右子结点：h.right=x.left; 2.让h成为x的左子结点：x.left=h; 3.让h的color属性变为x的color属性值：x.color=h.color; 4.让h的color属性变为RED：h.color=true;</p>
</blockquote>
<blockquote>
<p>右旋过程： 1. 让x的右子结点成为h的左子结点：h.left = x.right; 2. 让h成为x的右子结点：x.right=h; 3. 让x的color变为h的color属性值：x.color = h.color; 4. 让h的color为RED；</p>
</blockquote>
</li>
<li><p>红黑树API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321170452823.png" alt="image-20220321170452823"></p>
</blockquote>
</li>
<li></li>
</ul>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><ul>
<li>特性、数据的存储  在磁盘文件中的应用</li>
</ul>
<h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><ul>
<li>与B数的差异、数据的存储  两个数的个子有点</li>
<li>在数据库中的应用<ul>
<li>未建立主键索引查询</li>
<li>建立主键索引查询</li>
<li>执行 select * from user where id&gt;=12 and id&lt;=18 ,如果有了索引，由于B+树的叶子结点形成了一个有序链表， 所以我们只需要找到id为12的叶子结点，按照遍历链表的方式顺序往后查即可，效率非常高。</li>
</ul>
</li>
</ul>
<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><ul>
<li><p>结构</p>
<blockquote>
<p>1.每个元素都唯一的对应一个结点； 2. 每一组数据中的多个元素都在同一颗树中； 3. 一个组中的数据对应的树和另外一个组中的数据对应的树之间没有任何联系； 4. 元素在树中并没有子父级关系的硬性要求；</p>
</blockquote>
</li>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321171546067.png" alt="image-20220321171546067"></p>
</blockquote>
</li>
<li><p>实现步骤</p>
<ul>
<li><strong>UF(int N)构造方法实现</strong></li>
<li><strong>union(int p,int q)合并方法实现</strong></li>
</ul>
</li>
<li><p>应用场景</p>
</li>
<li><p>UF_Tree算法优化、优化后性能分析  API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321171739713.png" alt="image-20220321171739713"></p>
</blockquote>
</li>
<li><p>方法实现</p>
<ul>
<li>find(int p)方法实现</li>
<li>union(int p,int q)合并方法实现</li>
</ul>
</li>
<li><p>路径压缩    API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321172050767.png" alt="image-20220321172050767"></p>
</blockquote>
</li>
<li><p>案例 - 畅通工程</p>
<blockquote>
<p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目 标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问 最少还需要建设多少条道路？</p>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321172300948.png" alt="image-20220321172300948"></p>
</blockquote>
<blockquote>
<p>1.创建一个并查集UF_Tree_Weighted(20); 2.分别调用union(0,1),union(6,9),union(3,8),union(5,11),union(2,12),union(6,10),union(4,8)，表示已经修建好的 道路把对应的城市连接起来； 3.如果城市全部连接起来，那么并查集中剩余的分组数目为1，所有的城市都在一个树中，所以，只需要获取当前 并查集中剩余的数目，减去1，就是还需要修建的道路数目；</p>
</blockquote>
</li>
</ul>
<h1 id="图的入门"><a href="#图的入门" class="headerlink" title="图的入门"></a>图的入门</h1><ul>
<li>图的定义及分类  </li>
</ul>
<h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><ul>
<li><p>  术语-&gt;相邻顶点-&gt;度-&gt;子图-&gt;路径-&gt;环-&gt;连通图-&gt;连通子图</p>
</li>
<li><p>存储结构、邻接矩阵、邻接表</p>
</li>
<li><p>有向图</p>
</li>
<li><p>图的实现 API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321172516022.png" alt="image-20220321172516022"></p>
</blockquote>
</li>
<li><p>深度优先搜索    API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321172606828.png" alt="image-20220321172606828"></p>
</blockquote>
</li>
<li><p>广度优先搜索    API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321172636939.png" alt="image-20220321172636939"></p>
</blockquote>
</li>
<li><p>案例 - 畅通工程续</p>
<blockquote>
<p>思路：</p>
<p>1.创建一个图Graph对象，表示城市； 2.分别调用 addEdge(0,1),addEdge(6,9),addEdge(3,8),addEdge(5,11),addEdge(2,12),addEdge(6,10),addEdge(4,8)，表示已 经修建好的道路把对应的城市连接起来； 3.通过Graph对象和顶点9，构建DepthFirstSearch对象或BreadthFirstSearch对象； 4.调用搜索对象的marked(10)方法和marked(8)方法，即可得到9和城市与10号城市以及9号城市与8号城市是否相通</p>
</blockquote>
</li>
<li><p>路径查找  API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321172807914.png" alt="image-20220321172807914"></p>
</blockquote>
</li>
</ul>
<h1 id="图的进阶"><a href="#图的进阶" class="headerlink" title="图的进阶"></a>图的进阶</h1><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><ul>
<li><p>定义 术语 -出度-&gt;入度-&gt;有向路径-&gt;有向环</p>
</li>
<li><p>一副有向图中两个顶点v和w存在的四种关系</p>
</li>
<li><p>API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321174506555.png" alt="image-20220321174506555"></p>
</blockquote>
</li>
</ul>
<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><ul>
<li><p>检测图中的有向环 API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321174625816.png" alt="image-20220321174625816"></p>
</blockquote>
<blockquote>
<p>在API中添加了onStack[] 布尔数组，索引为图的顶点，当我们深度搜索时： </p>
<ol>
<li>在如果当前顶点正在搜索，则把对应的onStack数组中的值改为true，标识进栈； </li>
<li>如果当前顶点搜索完毕，则把对应的onStack数组中的值改为false，标识出栈； </li>
<li>如果即将要搜索某个顶点，但该顶点已经在栈中，则图中有环；</li>
</ol>
</blockquote>
</li>
<li><p>基于深度优先的顶点排序  API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321174814888.png" alt="image-20220321174814888"></p>
<p>如何实现</p>
</blockquote>
</li>
<li><p>拓扑排序实现    API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321174906699.png" alt="image-20220321174906699"></p>
</blockquote>
</li>
</ul>
<h3 id="加权无向图"><a href="#加权无向图" class="headerlink" title="加权无向图"></a>加权无向图</h3><ul>
<li><p>加权无向图的表示  API</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321174958670.png" alt="image-20220321174958670"></p>
</blockquote>
</li>
<li><p>加权无向图的实现  API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321175032730.png" alt="image-20220321175032730"></p>
</blockquote>
</li>
</ul>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ul>
<li><p>定义、约定</p>
</li>
<li><p>树的性质、切分定理</p>
</li>
<li><p>贪心算法</p>
</li>
<li><p>Prim算法API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321175247222.png" alt="image-20220321175247222"></p>
<p>实现原理</p>
</blockquote>
</li>
<li><p>kruskal算法API设计        与Prim的区别</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321175404250.png" alt="image-20220321175404250"></p>
<p>实现原理</p>
</blockquote>
</li>
</ul>
<h3 id="加权有向图"><a href="#加权有向图" class="headerlink" title="加权有向图"></a>加权有向图</h3><ul>
<li><p>加权有向图的表示API</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321175533285.png" alt="image-20220321175533285"></p>
</blockquote>
</li>
<li><p>实现API</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321175607753.png" alt="image-20220321175607753"></p>
</blockquote>
</li>
</ul>
<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul>
<li><p>定义、性质</p>
</li>
<li><p>最短路径树API设计</p>
<blockquote>
<p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220321175721111.png" alt="image-20220321175721111"></p>
</blockquote>
</li>
<li><p>松弛技术-&gt;边的松弛  顶点松弛</p>
</li>
<li><p>Dijstra算法的实现</p>
</li>
</ul>
]]></content>
  </entry>
</search>
